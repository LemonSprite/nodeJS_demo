【工作总结】

  1、学习javascript
        — 了解javascript的特点以及适用场景，熟悉它的基本语法以及面向对象的程序设计
        — 学习javascript的高级特性，如变量对象、作用域链、原型链、、上下文、垃圾回收、闭包等
        — 熟悉在Webstorm进行Node.js环境下javascript的编码与调试
        
  2、学习Node.js
        — 搭建Node.js开发环境，熟悉NPM包管理工具的使用
        — 清楚认识Node.js的优缺点、应用场景以及它的模块加载机制
        — 阅读Node.js官方API文档，熟悉Node.js重点模块，完成相应的练习
        — 了解RESTful API，学习REST设计风格，了解前后端分离思想

  3、完成留言板项目
        — 搭建MEN开发环境，熟悉Express框架特性以及中间件和路由的使用
        — 熟悉HTTP协议、cookie、session、EJS模版引擎等相关知识
        — 了解HTML、CSS基础知识，了解前端javascript的编写
        — 学习mongodb、mysql，并学会在Node.js中使用相应模块来操作它们
        — 完成留言板项目的功能需求，并学习async、promise等模块，重构代码

  4、阅读javascript、node.js相关书籍
        — 《javascript高级程序设计(前七章)
        — 《javascript语言精粹》
        — 《了不起的node.js》
        — 《Node.js权威指南》(部分章节)   
        — 《Node.js开发指南》


【成长与收获】

    1、对于javascript的看法
    初识javascript，对这个动态、弱类型语言的简洁有很深的印象，包括它基于原型的设计以及闭包等高级特性都让人感受到语言之精妙。不过在对javascript有了较为深入的了解后，也渐渐察觉到这门语言的缺陷，比如它没有命名空间、难以模块化、没有块级作用域、自动插入行尾分号等，都让人感觉不是特别规范。但这并不影响javascript成为流行的脚本语言，包括node会选它来作为载体语言，也体现其高级特性和函数式编程的优点。

    2、为什么选择node.js
    对于node.js起初我是很陌生的，一直认为的后端应该是用java、PHP或者python来做，毕竟这些语言以及它们的框架已经很成熟了，对于使用javascript来开发后端，让我一度对它有些质疑。不过一个好的程序员需要不断接收吸收新的技术，丰富自己的技术栈，node.js能火起来也自然有它的理由。在了解node.js后，发现了它很多强大的地方：基于V8引擎、事件驱动、非阻塞I/O、适合高并发和I/O密集型场景，还有就是强大的社区。在感慨node.js强大的同时，也发现了这是一条可以全栈的道路，值得投身其中。

    3、关于留言板项目
    留言板这个项目让我学到了很多，包括Express框架、中间件、路由、http、mongodb等的使用，我比较喜欢在项目中不断扩大知识面，在了解各个关键点的知识后，在实战的同时对它们进行深入理解。其间碰到了很多困难，包括起初对前端知识的匮乏以及异步流程控制的不熟悉，都让项目的进度有些缓慢，在一番磕磕碰碰后，才开始慢慢上手。在用node.js来处理复杂逻辑时，原生的回调真的写的心累，不过在用了异步流程控制模块后，感觉就回不去了。


【感受与建议】
    
    来公司实习差不多一个月，对公司和部门也有了一个清楚的认识，年轻的团队，乐于助人的同事，循循指导的组长，还有丰富的学习资料都让我感受到公司良好的技术氛围。能够处在这么一个优秀、有活力的团队中，对于自身的发展和成长是极好的。一个月的时间不长，再加上本身没有相关的基础，以至于我还无法完全掌握工作所需的技能，后面的时间里我会加紧学习，争取尽快参与到项目当中。在解决问题方面，由于更倾向于独立解决，所以和组长、老同事交流的不是很多，这一点我会在后面的工作中改善，毕竟有效的沟通是解决问题最有效的办法。最后，非常开心能来到多益网络这个大家庭！